name: Lint Check
permissions:
  contents: read
  pull-requests: read

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      web: ${{ steps.changes.outputs.web }}
      desktop: ${{ steps.changes.outputs.desktop }}
      tauri: ${{ steps.changes.outputs.tauri }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            web:
              - 'web/**'
            desktop:
              - 'desktop/**'
              - '!desktop/src-tauri/**'
            tauri:
              - 'desktop/src-tauri/**'

  lint-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m
          
      - name: Run Go vet
        working-directory: ./backend
        run: go vet ./...
        
      - name: Run Go fmt check
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to format your code."
            exit 1
          fi

  lint-web:
    needs: detect-changes
    if: needs.detect-changes.outputs.web == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'web/pnpm-lock.yaml'
          
      - name: Install dependencies
        working-directory: ./web
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        working-directory: ./web
        run: pnpm lint
        
      - name: Run TypeScript check
        working-directory: ./web
        run: pnpm exec tsc --noEmit

  lint-desktop:
    needs: detect-changes
    if: needs.detect-changes.outputs.desktop == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'desktop/pnpm-lock.yaml'
          
      - name: Install dependencies
        working-directory: ./desktop
        run: pnpm install --frozen-lockfile
        
      - name: Run TypeScript check
        working-directory: ./desktop
        run: pnpm exec tsc --noEmit
        
      # Note: Desktop doesn't have ESLint configured, add it if needed
      - name: Check for ESLint config
        working-directory: ./desktop
        run: |
          if [ -f "eslint.config.js" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            echo "ESLint config found, running linter..."
            pnpm exec eslint .
          else
            echo "No ESLint config found, skipping ESLint check"
          fi

  lint-tauri:
    needs: detect-changes
    if: needs.detect-changes.outputs.tauri == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            desktop/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run Rust formatter check
        working-directory: ./desktop/src-tauri
        run: cargo fmt --all -- --check
        
      - name: Run Clippy
        working-directory: ./desktop/src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run Rust tests
        working-directory: ./desktop/src-tauri
        run: cargo test

  # Summary job that depends on all lint jobs
  lint-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-backend, lint-web, lint-desktop, lint-tauri]
    if: always()
    steps:
      - name: Check lint results
        run: |
          echo "Lint Summary:"
          echo "Backend changes: ${{ needs.detect-changes.outputs.backend }}"
          echo "Web changes: ${{ needs.detect-changes.outputs.web }}"
          echo "Desktop changes: ${{ needs.detect-changes.outputs.desktop }}"
          echo "Tauri changes: ${{ needs.detect-changes.outputs.tauri }}"
          
          # Check if any required job failed
          if [[ "${{ needs.lint-backend.result }}" == "failure" ]] || \
             [[ "${{ needs.lint-web.result }}" == "failure" ]] || \
             [[ "${{ needs.lint-desktop.result }}" == "failure" ]] || \
             [[ "${{ needs.lint-tauri.result }}" == "failure" ]]; then
            echo "❌ One or more lint checks failed"
            exit 1
          else
            echo "✅ All applicable lint checks passed"
          fi 
 